#!/usr/bin/env python3
"""
Extract and analyze text from the Vietnamese legal document PDF
"""

import sys
import os
import fitz  # PyMuPDF
import re

def extract_pdf_text(pdf_path):
    """Extract text from PDF and analyze for person information"""
    try:
        doc = fitz.open(pdf_path)
        full_text = ""
        
        print(f"üìÑ Analyzing PDF: {pdf_path}")
        print(f"üìä Total pages: {len(doc)}")
        print("=" * 60)
        
        for page_num in range(len(doc)):
            page = doc[page_num]
            page_text = page.get_text()
            
            if page_text.strip():
                print(f"\n--- Page {page_num + 1} ---")
                print(page_text[:800])  # Show more text
                full_text += page_text + "\n"
        
        doc.close()
        
        print("\n" + "=" * 60)
        print("üîç FULL DOCUMENT TEXT FOR ANALYSIS:")
        print("=" * 60)
        print(full_text)
        
        # Manual pattern analysis
        print("\n" + "=" * 60)
        print("üîç MANUAL PATTERN ANALYSIS:")
        print("=" * 60)
        
        # Look for common Vietnamese legal document patterns
        patterns_to_check = [
            r'Nguy·ªÖn\s+Minh\s+Tu·∫•n',
            r'1979',
            r'ng∆∞·ªùi\s+b·ªã\s+k·∫øt\s+√°n',
            r'ph·∫°m\s+nh√¢n',
            r'b·ªã\s+c√°o',
            r'sinh\s*(?:nƒÉm|ng√†y)',
            r'h·ªç\s+v√†\s+t√™n',
            r't√™n\s*:',
        ]
        
        for pattern in patterns_to_check:
            matches = re.findall(pattern, full_text, re.IGNORECASE | re.UNICODE)
            if matches:
                print(f"‚úÖ Found pattern '{pattern}': {matches}")
            else:
                print(f"‚ùå Pattern '{pattern}': No matches")
        
        return full_text
        
    except Exception as e:
        print(f"‚ùå Error extracting PDF: {e}")
        return None

def test_llm_extraction(text):
    """Test LLM extraction with the actual text"""
    try:
        sys.path.append(os.path.join(os.path.dirname(__file__), 'ocrServer'))
        from working_vintern_client import WorkingVinternClient
        
        client = WorkingVinternClient("http://localhost:8001")
        
        # Check if server is ready
        health = client.is_healthy()
        if not health.get("model_loaded"):
            print("‚ùå LLM Server not ready")
            return
        
        print("\n" + "=" * 60)
        print("ü§ñ TESTING LLM EXTRACTION:")
        print("=" * 60)
        
        # Use a very specific prompt for Vietnamese legal documents
        prompt = f"""B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu ph√°p l√Ω Vi·ªát Nam. Trong t√†i li·ªáu n√†y, h√£y t√¨m th√¥ng tin v·ªÅ ng∆∞·ªùi ch√≠nh (ng∆∞·ªùi b·ªã k·∫øt √°n, ph·∫°m nh√¢n, b·ªã c√°o).

T√¨m ch√≠nh x√°c:
- T√™n ng∆∞·ªùi: Nguy·ªÖn Minh Tu·∫•n
- NƒÉm sinh: 1979
- Vai tr√≤: ng∆∞·ªùi b·ªã k·∫øt √°n

Tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng:
{{"name": "Nguy·ªÖn Minh Tu·∫•n", "birth_year": 1979, "role": "ng∆∞·ªùi b·ªã k·∫øt √°n"}}

T√†i li·ªáu:
{text[:1500]}"""
        
        response = client.chat(
            prompt,
            max_tokens=200,
            temperature=0.0
        )
        
        print(f"ü§ñ LLM Response:")
        print(response)
        
        # Try to extract JSON
        import json
        try:
            start = response.find('{')
            end = response.rfind('}') + 1
            
            if start >= 0 and end > start:
                json_str = response[start:end]
                print(f"\nüîß Extracted JSON: {json_str}")
                
                person_data = json.loads(json_str)
                print(f"\n‚úÖ Parsed Result:")
                print(f"   Name: {person_data.get('name')}")
                print(f"   Birth Year: {person_data.get('birth_year')}")
                print(f"   Role: {person_data.get('role')}")
                
        except Exception as e:
            print(f"‚ùå JSON parsing failed: {e}")
        
    except Exception as e:
        print(f"‚ùå LLM test failed: {e}")

if __name__ == "__main__":
    pdf_path = "sampledoc/Thi h√†nh √°n h√¨nh ph·∫°t t√π-nmt79.pdf"
    
    if os.path.exists(pdf_path):
        text = extract_pdf_text(pdf_path)
        if text:
            test_llm_extraction(text)
    else:
        print(f"‚ùå PDF file not found: {pdf_path}")
